// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataTypes.proto

package org.apache.tajo.common;

public final class TajoDataTypes {
  private TajoDataTypes() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code Type}
   */
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NULL_TYPE = 0;</code>
     *
     * <pre>
     * NULL type
     * </pre>
     */
    NULL_TYPE(0, 0),
    /**
     * <code>BOOLEAN = 1;</code>
     *
     * <pre>
     * state of true of false [1 byte]
     * </pre>
     */
    BOOLEAN(1, 1),
    /**
     * <code>INT1 = 2;</code>
     *
     * <pre>
     * tinyint [1 byte] [0-255]
     * </pre>
     */
    INT1(2, 2),
    /**
     * <code>INT2 = 3;</code>
     *
     * <pre>
     * smallint [2 bytes] [-2^15(-32,768) ~ 2^15-1(32,767)]
     * </pre>
     */
    INT2(3, 3),
    /**
     * <code>INT4 = 4;</code>
     *
     * <pre>
     * int [4 bytes] [-2^31(-2,147,483,648) ~ 2^31-1(2,147,483,647)]
     * </pre>
     */
    INT4(4, 4),
    /**
     * <code>INT8 = 5;</code>
     *
     * <pre>
     * bigint [8 bytes] [-2^63(-9,223,372,036,854,775,808) ~ 2^63-1(9,223,372,036,854,775,807)]
     * </pre>
     */
    INT8(5, 5),
    /**
     * <code>UINT1 = 6;</code>
     *
     * <pre>
     * unsigned int1
     * </pre>
     */
    UINT1(6, 6),
    /**
     * <code>UINT2 = 7;</code>
     *
     * <pre>
     * unsigned int2
     * </pre>
     */
    UINT2(7, 7),
    /**
     * <code>UINT4 = 8;</code>
     *
     * <pre>
     * unsigned int4
     * </pre>
     */
    UINT4(8, 8),
    /**
     * <code>UINT8 = 9;</code>
     *
     * <pre>
     * unsigned int8
     * </pre>
     */
    UINT8(9, 9),
    /**
     * <code>FLOAT4 = 10;</code>
     *
     * <pre>
     * variable-precision, inexact [4 bytes]
     * </pre>
     */
    FLOAT4(10, 10),
    /**
     * <code>FLOAT8 = 11;</code>
     *
     * <pre>
     * variable-precision, inexact [8 bytes]
     * </pre>
     */
    FLOAT8(11, 11),
    /**
     * <code>NUMERIC = 12;</code>
     *
     * <pre>
     * variable length
     * </pre>
     */
    NUMERIC(12, 12),
    /**
     * <code>CHAR = 21;</code>
     *
     * <pre>
     * fixed-width n-character string
     * </pre>
     */
    CHAR(13, 21),
    /**
     * <code>NCHAR = 22;</code>
     *
     * <pre>
     * fixed width string supporting an international character set
     * </pre>
     */
    NCHAR(14, 22),
    /**
     * <code>VARCHAR = 23;</code>
     *
     * <pre>
     * variable-width string
     * </pre>
     */
    VARCHAR(15, 23),
    /**
     * <code>NVARCHAR = 24;</code>
     *
     * <pre>
     * variable-width NCHAR string
     * </pre>
     */
    NVARCHAR(16, 24),
    /**
     * <code>TEXT = 25;</code>
     *
     * <pre>
     * variable unlimited length
     * </pre>
     */
    TEXT(17, 25),
    /**
     * <code>DATE = 31;</code>
     */
    DATE(18, 31),
    /**
     * <code>TIME = 32;</code>
     */
    TIME(19, 32),
    /**
     * <code>TIMEZ = 33;</code>
     */
    TIMEZ(20, 33),
    /**
     * <code>TIMESTAMP = 34;</code>
     */
    TIMESTAMP(21, 34),
    /**
     * <code>TIMESTAMPZ = 35;</code>
     */
    TIMESTAMPZ(22, 35),
    /**
     * <code>INTERVAL = 36;</code>
     */
    INTERVAL(23, 36),
    /**
     * <code>BIT = 41;</code>
     *
     * <pre>
     * fixed-width bits. BIT without the length L means a single bit. It can be used for boolean type.
     * </pre>
     */
    BIT(24, 41),
    /**
     * <code>VARBIT = 42;</code>
     *
     * <pre>
     * variable-width bits
     * </pre>
     */
    VARBIT(25, 42),
    /**
     * <code>BINARY = 43;</code>
     *
     * <pre>
     * fixed-width binary strings. BINARY without the length L means a single byte.
     * </pre>
     */
    BINARY(26, 43),
    /**
     * <code>VARBINARY = 44;</code>
     *
     * <pre>
     * variable-width binary strings
     * </pre>
     */
    VARBINARY(27, 44),
    /**
     * <code>BLOB = 45;</code>
     */
    BLOB(28, 45),
    /**
     * <code>ANY = 51;</code>
     *
     * <pre>
     * Any type
     * </pre>
     */
    ANY(29, 51),
    /**
     * <code>UDT = 52;</code>
     *
     * <pre>
     * user-defined function
     * </pre>
     */
    UDT(30, 52),
    /**
     * <code>PROTOBUF = 53;</code>
     *
     * <pre>
     * protocol buffer type
     * </pre>
     */
    PROTOBUF(31, 53),
    /**
     * <code>INET4 = 91;</code>
     */
    INET4(32, 91),
    /**
     * <code>INET6 = 92;</code>
     */
    INET6(33, 92),
    /**
     * <code>BOOLEAN_ARRAY = 101;</code>
     *
     * <pre>
     * array types
     * </pre>
     */
    BOOLEAN_ARRAY(34, 101),
    /**
     * <code>INT1_ARRAY = 102;</code>
     */
    INT1_ARRAY(35, 102),
    /**
     * <code>INT2_ARRAY = 103;</code>
     */
    INT2_ARRAY(36, 103),
    /**
     * <code>INT4_ARRAY = 104;</code>
     */
    INT4_ARRAY(37, 104),
    /**
     * <code>INT8_ARRAY = 105;</code>
     */
    INT8_ARRAY(38, 105),
    /**
     * <code>UINT1_ARRAY = 106;</code>
     */
    UINT1_ARRAY(39, 106),
    /**
     * <code>UINT2_ARRAY = 107;</code>
     */
    UINT2_ARRAY(40, 107),
    /**
     * <code>UINT4_ARRAY = 108;</code>
     */
    UINT4_ARRAY(41, 108),
    /**
     * <code>UINT8_ARRAY = 109;</code>
     */
    UINT8_ARRAY(42, 109),
    /**
     * <code>FLOAT4_ARRAY = 110;</code>
     */
    FLOAT4_ARRAY(43, 110),
    /**
     * <code>FLOAT8_ARRAY = 111;</code>
     */
    FLOAT8_ARRAY(44, 111),
    /**
     * <code>NUMERIC_ARRAY = 112;</code>
     */
    NUMERIC_ARRAY(45, 112),
    /**
     * <code>CHAR_ARRAY = 121;</code>
     */
    CHAR_ARRAY(46, 121),
    /**
     * <code>NCHAR_ARRAY = 122;</code>
     */
    NCHAR_ARRAY(47, 122),
    /**
     * <code>VARCHAR_ARRAY = 123;</code>
     */
    VARCHAR_ARRAY(48, 123),
    /**
     * <code>NVARCHAR_ARRAY = 124;</code>
     */
    NVARCHAR_ARRAY(49, 124),
    /**
     * <code>TEXT_ARRAY = 125;</code>
     */
    TEXT_ARRAY(50, 125),
    /**
     * <code>DATE_ARRAY = 131;</code>
     */
    DATE_ARRAY(51, 131),
    /**
     * <code>TIME_ARRAY = 132;</code>
     */
    TIME_ARRAY(52, 132),
    /**
     * <code>TIMEZ_ARRAY = 133;</code>
     */
    TIMEZ_ARRAY(53, 133),
    /**
     * <code>TIMESTAMP_ARRAY = 134;</code>
     */
    TIMESTAMP_ARRAY(54, 134),
    /**
     * <code>TIMESTAMPZ_ARRAY = 135;</code>
     */
    TIMESTAMPZ_ARRAY(55, 135),
    /**
     * <code>INTERVAL_ARRAY = 136;</code>
     */
    INTERVAL_ARRAY(56, 136),
    ;

    /**
     * <code>NULL_TYPE = 0;</code>
     *
     * <pre>
     * NULL type
     * </pre>
     */
    public static final int NULL_TYPE_VALUE = 0;
    /**
     * <code>BOOLEAN = 1;</code>
     *
     * <pre>
     * state of true of false [1 byte]
     * </pre>
     */
    public static final int BOOLEAN_VALUE = 1;
    /**
     * <code>INT1 = 2;</code>
     *
     * <pre>
     * tinyint [1 byte] [0-255]
     * </pre>
     */
    public static final int INT1_VALUE = 2;
    /**
     * <code>INT2 = 3;</code>
     *
     * <pre>
     * smallint [2 bytes] [-2^15(-32,768) ~ 2^15-1(32,767)]
     * </pre>
     */
    public static final int INT2_VALUE = 3;
    /**
     * <code>INT4 = 4;</code>
     *
     * <pre>
     * int [4 bytes] [-2^31(-2,147,483,648) ~ 2^31-1(2,147,483,647)]
     * </pre>
     */
    public static final int INT4_VALUE = 4;
    /**
     * <code>INT8 = 5;</code>
     *
     * <pre>
     * bigint [8 bytes] [-2^63(-9,223,372,036,854,775,808) ~ 2^63-1(9,223,372,036,854,775,807)]
     * </pre>
     */
    public static final int INT8_VALUE = 5;
    /**
     * <code>UINT1 = 6;</code>
     *
     * <pre>
     * unsigned int1
     * </pre>
     */
    public static final int UINT1_VALUE = 6;
    /**
     * <code>UINT2 = 7;</code>
     *
     * <pre>
     * unsigned int2
     * </pre>
     */
    public static final int UINT2_VALUE = 7;
    /**
     * <code>UINT4 = 8;</code>
     *
     * <pre>
     * unsigned int4
     * </pre>
     */
    public static final int UINT4_VALUE = 8;
    /**
     * <code>UINT8 = 9;</code>
     *
     * <pre>
     * unsigned int8
     * </pre>
     */
    public static final int UINT8_VALUE = 9;
    /**
     * <code>FLOAT4 = 10;</code>
     *
     * <pre>
     * variable-precision, inexact [4 bytes]
     * </pre>
     */
    public static final int FLOAT4_VALUE = 10;
    /**
     * <code>FLOAT8 = 11;</code>
     *
     * <pre>
     * variable-precision, inexact [8 bytes]
     * </pre>
     */
    public static final int FLOAT8_VALUE = 11;
    /**
     * <code>NUMERIC = 12;</code>
     *
     * <pre>
     * variable length
     * </pre>
     */
    public static final int NUMERIC_VALUE = 12;
    /**
     * <code>CHAR = 21;</code>
     *
     * <pre>
     * fixed-width n-character string
     * </pre>
     */
    public static final int CHAR_VALUE = 21;
    /**
     * <code>NCHAR = 22;</code>
     *
     * <pre>
     * fixed width string supporting an international character set
     * </pre>
     */
    public static final int NCHAR_VALUE = 22;
    /**
     * <code>VARCHAR = 23;</code>
     *
     * <pre>
     * variable-width string
     * </pre>
     */
    public static final int VARCHAR_VALUE = 23;
    /**
     * <code>NVARCHAR = 24;</code>
     *
     * <pre>
     * variable-width NCHAR string
     * </pre>
     */
    public static final int NVARCHAR_VALUE = 24;
    /**
     * <code>TEXT = 25;</code>
     *
     * <pre>
     * variable unlimited length
     * </pre>
     */
    public static final int TEXT_VALUE = 25;
    /**
     * <code>DATE = 31;</code>
     */
    public static final int DATE_VALUE = 31;
    /**
     * <code>TIME = 32;</code>
     */
    public static final int TIME_VALUE = 32;
    /**
     * <code>TIMEZ = 33;</code>
     */
    public static final int TIMEZ_VALUE = 33;
    /**
     * <code>TIMESTAMP = 34;</code>
     */
    public static final int TIMESTAMP_VALUE = 34;
    /**
     * <code>TIMESTAMPZ = 35;</code>
     */
    public static final int TIMESTAMPZ_VALUE = 35;
    /**
     * <code>INTERVAL = 36;</code>
     */
    public static final int INTERVAL_VALUE = 36;
    /**
     * <code>BIT = 41;</code>
     *
     * <pre>
     * fixed-width bits. BIT without the length L means a single bit. It can be used for boolean type.
     * </pre>
     */
    public static final int BIT_VALUE = 41;
    /**
     * <code>VARBIT = 42;</code>
     *
     * <pre>
     * variable-width bits
     * </pre>
     */
    public static final int VARBIT_VALUE = 42;
    /**
     * <code>BINARY = 43;</code>
     *
     * <pre>
     * fixed-width binary strings. BINARY without the length L means a single byte.
     * </pre>
     */
    public static final int BINARY_VALUE = 43;
    /**
     * <code>VARBINARY = 44;</code>
     *
     * <pre>
     * variable-width binary strings
     * </pre>
     */
    public static final int VARBINARY_VALUE = 44;
    /**
     * <code>BLOB = 45;</code>
     */
    public static final int BLOB_VALUE = 45;
    /**
     * <code>ANY = 51;</code>
     *
     * <pre>
     * Any type
     * </pre>
     */
    public static final int ANY_VALUE = 51;
    /**
     * <code>UDT = 52;</code>
     *
     * <pre>
     * user-defined function
     * </pre>
     */
    public static final int UDT_VALUE = 52;
    /**
     * <code>PROTOBUF = 53;</code>
     *
     * <pre>
     * protocol buffer type
     * </pre>
     */
    public static final int PROTOBUF_VALUE = 53;
    /**
     * <code>INET4 = 91;</code>
     */
    public static final int INET4_VALUE = 91;
    /**
     * <code>INET6 = 92;</code>
     */
    public static final int INET6_VALUE = 92;
    /**
     * <code>BOOLEAN_ARRAY = 101;</code>
     *
     * <pre>
     * array types
     * </pre>
     */
    public static final int BOOLEAN_ARRAY_VALUE = 101;
    /**
     * <code>INT1_ARRAY = 102;</code>
     */
    public static final int INT1_ARRAY_VALUE = 102;
    /**
     * <code>INT2_ARRAY = 103;</code>
     */
    public static final int INT2_ARRAY_VALUE = 103;
    /**
     * <code>INT4_ARRAY = 104;</code>
     */
    public static final int INT4_ARRAY_VALUE = 104;
    /**
     * <code>INT8_ARRAY = 105;</code>
     */
    public static final int INT8_ARRAY_VALUE = 105;
    /**
     * <code>UINT1_ARRAY = 106;</code>
     */
    public static final int UINT1_ARRAY_VALUE = 106;
    /**
     * <code>UINT2_ARRAY = 107;</code>
     */
    public static final int UINT2_ARRAY_VALUE = 107;
    /**
     * <code>UINT4_ARRAY = 108;</code>
     */
    public static final int UINT4_ARRAY_VALUE = 108;
    /**
     * <code>UINT8_ARRAY = 109;</code>
     */
    public static final int UINT8_ARRAY_VALUE = 109;
    /**
     * <code>FLOAT4_ARRAY = 110;</code>
     */
    public static final int FLOAT4_ARRAY_VALUE = 110;
    /**
     * <code>FLOAT8_ARRAY = 111;</code>
     */
    public static final int FLOAT8_ARRAY_VALUE = 111;
    /**
     * <code>NUMERIC_ARRAY = 112;</code>
     */
    public static final int NUMERIC_ARRAY_VALUE = 112;
    /**
     * <code>CHAR_ARRAY = 121;</code>
     */
    public static final int CHAR_ARRAY_VALUE = 121;
    /**
     * <code>NCHAR_ARRAY = 122;</code>
     */
    public static final int NCHAR_ARRAY_VALUE = 122;
    /**
     * <code>VARCHAR_ARRAY = 123;</code>
     */
    public static final int VARCHAR_ARRAY_VALUE = 123;
    /**
     * <code>NVARCHAR_ARRAY = 124;</code>
     */
    public static final int NVARCHAR_ARRAY_VALUE = 124;
    /**
     * <code>TEXT_ARRAY = 125;</code>
     */
    public static final int TEXT_ARRAY_VALUE = 125;
    /**
     * <code>DATE_ARRAY = 131;</code>
     */
    public static final int DATE_ARRAY_VALUE = 131;
    /**
     * <code>TIME_ARRAY = 132;</code>
     */
    public static final int TIME_ARRAY_VALUE = 132;
    /**
     * <code>TIMEZ_ARRAY = 133;</code>
     */
    public static final int TIMEZ_ARRAY_VALUE = 133;
    /**
     * <code>TIMESTAMP_ARRAY = 134;</code>
     */
    public static final int TIMESTAMP_ARRAY_VALUE = 134;
    /**
     * <code>TIMESTAMPZ_ARRAY = 135;</code>
     */
    public static final int TIMESTAMPZ_ARRAY_VALUE = 135;
    /**
     * <code>INTERVAL_ARRAY = 136;</code>
     */
    public static final int INTERVAL_ARRAY_VALUE = 136;


    public final int getNumber() { return value; }

    public static Type valueOf(int value) {
      switch (value) {
        case 0: return NULL_TYPE;
        case 1: return BOOLEAN;
        case 2: return INT1;
        case 3: return INT2;
        case 4: return INT4;
        case 5: return INT8;
        case 6: return UINT1;
        case 7: return UINT2;
        case 8: return UINT4;
        case 9: return UINT8;
        case 10: return FLOAT4;
        case 11: return FLOAT8;
        case 12: return NUMERIC;
        case 21: return CHAR;
        case 22: return NCHAR;
        case 23: return VARCHAR;
        case 24: return NVARCHAR;
        case 25: return TEXT;
        case 31: return DATE;
        case 32: return TIME;
        case 33: return TIMEZ;
        case 34: return TIMESTAMP;
        case 35: return TIMESTAMPZ;
        case 36: return INTERVAL;
        case 41: return BIT;
        case 42: return VARBIT;
        case 43: return BINARY;
        case 44: return VARBINARY;
        case 45: return BLOB;
        case 51: return ANY;
        case 52: return UDT;
        case 53: return PROTOBUF;
        case 91: return INET4;
        case 92: return INET6;
        case 101: return BOOLEAN_ARRAY;
        case 102: return INT1_ARRAY;
        case 103: return INT2_ARRAY;
        case 104: return INT4_ARRAY;
        case 105: return INT8_ARRAY;
        case 106: return UINT1_ARRAY;
        case 107: return UINT2_ARRAY;
        case 108: return UINT4_ARRAY;
        case 109: return UINT8_ARRAY;
        case 110: return FLOAT4_ARRAY;
        case 111: return FLOAT8_ARRAY;
        case 112: return NUMERIC_ARRAY;
        case 121: return CHAR_ARRAY;
        case 122: return NCHAR_ARRAY;
        case 123: return VARCHAR_ARRAY;
        case 124: return NVARCHAR_ARRAY;
        case 125: return TEXT_ARRAY;
        case 131: return DATE_ARRAY;
        case 132: return TIME_ARRAY;
        case 133: return TIMEZ_ARRAY;
        case 134: return TIMESTAMP_ARRAY;
        case 135: return TIMESTAMPZ_ARRAY;
        case 136: return INTERVAL_ARRAY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.apache.tajo.common.TajoDataTypes.getDescriptor().getEnumTypes().get(0);
    }

    private static final Type[] VALUES = values();

    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Type(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Type)
  }

  public interface DataTypeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .Type type = 1;
    /**
     * <code>required .Type type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .Type type = 1;</code>
     */
    org.apache.tajo.common.TajoDataTypes.Type getType();

    // optional int32 length = 2;
    /**
     * <code>optional int32 length = 2;</code>
     */
    boolean hasLength();
    /**
     * <code>optional int32 length = 2;</code>
     */
    int getLength();

    // optional string code = 3;
    /**
     * <code>optional string code = 3;</code>
     */
    boolean hasCode();
    /**
     * <code>optional string code = 3;</code>
     */
    java.lang.String getCode();
    /**
     * <code>optional string code = 3;</code>
     */
    com.google.protobuf.ByteString
        getCodeBytes();
  }
  /**
   * Protobuf type {@code DataType}
   */
  public static final class DataType extends
      com.google.protobuf.GeneratedMessage
      implements DataTypeOrBuilder {
    // Use DataType.newBuilder() to construct.
    private DataType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DataType(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DataType defaultInstance;
    public static DataType getDefaultInstance() {
      return defaultInstance;
    }

    public DataType getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DataType(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.apache.tajo.common.TajoDataTypes.Type value = org.apache.tajo.common.TajoDataTypes.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              length_ = input.readInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              code_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.tajo.common.TajoDataTypes.internal_static_DataType_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.tajo.common.TajoDataTypes.internal_static_DataType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.tajo.common.TajoDataTypes.DataType.class, org.apache.tajo.common.TajoDataTypes.DataType.Builder.class);
    }

    public static com.google.protobuf.Parser<DataType> PARSER =
        new com.google.protobuf.AbstractParser<DataType>() {
      public DataType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DataType(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DataType> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .Type type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.apache.tajo.common.TajoDataTypes.Type type_;
    /**
     * <code>required .Type type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .Type type = 1;</code>
     */
    public org.apache.tajo.common.TajoDataTypes.Type getType() {
      return type_;
    }

    // optional int32 length = 2;
    public static final int LENGTH_FIELD_NUMBER = 2;
    private int length_;
    /**
     * <code>optional int32 length = 2;</code>
     */
    public boolean hasLength() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 length = 2;</code>
     */
    public int getLength() {
      return length_;
    }

    // optional string code = 3;
    public static final int CODE_FIELD_NUMBER = 3;
    private java.lang.Object code_;
    /**
     * <code>optional string code = 3;</code>
     */
    public boolean hasCode() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string code = 3;</code>
     */
    public java.lang.String getCode() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          code_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string code = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCodeBytes() {
      java.lang.Object ref = code_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        code_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      type_ = org.apache.tajo.common.TajoDataTypes.Type.NULL_TYPE;
      length_ = 0;
      code_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, length_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getCodeBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, length_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getCodeBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.tajo.common.TajoDataTypes.DataType)) {
        return super.equals(obj);
      }
      org.apache.tajo.common.TajoDataTypes.DataType other = (org.apache.tajo.common.TajoDataTypes.DataType) obj;

      boolean result = true;
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result &&
            (getType() == other.getType());
      }
      result = result && (hasLength() == other.hasLength());
      if (hasLength()) {
        result = result && (getLength()
            == other.getLength());
      }
      result = result && (hasCode() == other.hasCode());
      if (hasCode()) {
        result = result && getCode()
            .equals(other.getCode());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + hashEnum(getType());
      }
      if (hasLength()) {
        hash = (37 * hash) + LENGTH_FIELD_NUMBER;
        hash = (53 * hash) + getLength();
      }
      if (hasCode()) {
        hash = (37 * hash) + CODE_FIELD_NUMBER;
        hash = (53 * hash) + getCode().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.apache.tajo.common.TajoDataTypes.DataType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.apache.tajo.common.TajoDataTypes.DataType prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DataType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.apache.tajo.common.TajoDataTypes.DataTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.apache.tajo.common.TajoDataTypes.internal_static_DataType_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.apache.tajo.common.TajoDataTypes.internal_static_DataType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.apache.tajo.common.TajoDataTypes.DataType.class, org.apache.tajo.common.TajoDataTypes.DataType.Builder.class);
      }

      // Construct using org.apache.tajo.common.TajoDataTypes.DataType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.apache.tajo.common.TajoDataTypes.Type.NULL_TYPE;
        bitField0_ = (bitField0_ & ~0x00000001);
        length_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        code_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.apache.tajo.common.TajoDataTypes.internal_static_DataType_descriptor;
      }

      public org.apache.tajo.common.TajoDataTypes.DataType getDefaultInstanceForType() {
        return org.apache.tajo.common.TajoDataTypes.DataType.getDefaultInstance();
      }

      public org.apache.tajo.common.TajoDataTypes.DataType build() {
        org.apache.tajo.common.TajoDataTypes.DataType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.apache.tajo.common.TajoDataTypes.DataType buildPartial() {
        org.apache.tajo.common.TajoDataTypes.DataType result = new org.apache.tajo.common.TajoDataTypes.DataType(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.length_ = length_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.code_ = code_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.apache.tajo.common.TajoDataTypes.DataType) {
          return mergeFrom((org.apache.tajo.common.TajoDataTypes.DataType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.apache.tajo.common.TajoDataTypes.DataType other) {
        if (other == org.apache.tajo.common.TajoDataTypes.DataType.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasLength()) {
          setLength(other.getLength());
        }
        if (other.hasCode()) {
          bitField0_ |= 0x00000004;
          code_ = other.code_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.apache.tajo.common.TajoDataTypes.DataType parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.apache.tajo.common.TajoDataTypes.DataType) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .Type type = 1;
      private org.apache.tajo.common.TajoDataTypes.Type type_ = org.apache.tajo.common.TajoDataTypes.Type.NULL_TYPE;
      /**
       * <code>required .Type type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .Type type = 1;</code>
       */
      public org.apache.tajo.common.TajoDataTypes.Type getType() {
        return type_;
      }
      /**
       * <code>required .Type type = 1;</code>
       */
      public Builder setType(org.apache.tajo.common.TajoDataTypes.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .Type type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.apache.tajo.common.TajoDataTypes.Type.NULL_TYPE;
        onChanged();
        return this;
      }

      // optional int32 length = 2;
      private int length_ ;
      /**
       * <code>optional int32 length = 2;</code>
       */
      public boolean hasLength() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 length = 2;</code>
       */
      public int getLength() {
        return length_;
      }
      /**
       * <code>optional int32 length = 2;</code>
       */
      public Builder setLength(int value) {
        bitField0_ |= 0x00000002;
        length_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 length = 2;</code>
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000002);
        length_ = 0;
        onChanged();
        return this;
      }

      // optional string code = 3;
      private java.lang.Object code_ = "";
      /**
       * <code>optional string code = 3;</code>
       */
      public boolean hasCode() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string code = 3;</code>
       */
      public java.lang.String getCode() {
        java.lang.Object ref = code_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          code_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string code = 3;</code>
       */
      public com.google.protobuf.ByteString
          getCodeBytes() {
        java.lang.Object ref = code_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          code_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string code = 3;</code>
       */
      public Builder setCode(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string code = 3;</code>
       */
      public Builder clearCode() {
        bitField0_ = (bitField0_ & ~0x00000004);
        code_ = getDefaultInstance().getCode();
        onChanged();
        return this;
      }
      /**
       * <code>optional string code = 3;</code>
       */
      public Builder setCodeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        code_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:DataType)
    }

    static {
      defaultInstance = new DataType(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:DataType)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_DataType_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_DataType_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017DataTypes.proto\"=\n\010DataType\022\023\n\004type\030\001 " +
      "\002(\0162\005.Type\022\016\n\006length\030\002 \001(\005\022\014\n\004code\030\003 \001(\t" +
      "*\255\006\n\004Type\022\r\n\tNULL_TYPE\020\000\022\013\n\007BOOLEAN\020\001\022\010\n" +
      "\004INT1\020\002\022\010\n\004INT2\020\003\022\010\n\004INT4\020\004\022\010\n\004INT8\020\005\022\t\n" +
      "\005UINT1\020\006\022\t\n\005UINT2\020\007\022\t\n\005UINT4\020\010\022\t\n\005UINT8\020" +
      "\t\022\n\n\006FLOAT4\020\n\022\n\n\006FLOAT8\020\013\022\013\n\007NUMERIC\020\014\022\010" +
      "\n\004CHAR\020\025\022\t\n\005NCHAR\020\026\022\013\n\007VARCHAR\020\027\022\014\n\010NVAR" +
      "CHAR\020\030\022\010\n\004TEXT\020\031\022\010\n\004DATE\020\037\022\010\n\004TIME\020 \022\t\n\005" +
      "TIMEZ\020!\022\r\n\tTIMESTAMP\020\"\022\016\n\nTIMESTAMPZ\020#\022\014" +
      "\n\010INTERVAL\020$\022\007\n\003BIT\020)\022\n\n\006VARBIT\020*\022\n\n\006BIN",
      "ARY\020+\022\r\n\tVARBINARY\020,\022\010\n\004BLOB\020-\022\007\n\003ANY\0203\022" +
      "\007\n\003UDT\0204\022\014\n\010PROTOBUF\0205\022\t\n\005INET4\020[\022\t\n\005INE" +
      "T6\020\\\022\021\n\rBOOLEAN_ARRAY\020e\022\016\n\nINT1_ARRAY\020f\022" +
      "\016\n\nINT2_ARRAY\020g\022\016\n\nINT4_ARRAY\020h\022\016\n\nINT8_" +
      "ARRAY\020i\022\017\n\013UINT1_ARRAY\020j\022\017\n\013UINT2_ARRAY\020" +
      "k\022\017\n\013UINT4_ARRAY\020l\022\017\n\013UINT8_ARRAY\020m\022\020\n\014F" +
      "LOAT4_ARRAY\020n\022\020\n\014FLOAT8_ARRAY\020o\022\021\n\rNUMER" +
      "IC_ARRAY\020p\022\016\n\nCHAR_ARRAY\020y\022\017\n\013NCHAR_ARRA" +
      "Y\020z\022\021\n\rVARCHAR_ARRAY\020{\022\022\n\016NVARCHAR_ARRAY" +
      "\020|\022\016\n\nTEXT_ARRAY\020}\022\017\n\nDATE_ARRAY\020\203\001\022\017\n\nT",
      "IME_ARRAY\020\204\001\022\020\n\013TIMEZ_ARRAY\020\205\001\022\024\n\017TIMEST" +
      "AMP_ARRAY\020\206\001\022\025\n\020TIMESTAMPZ_ARRAY\020\207\001\022\023\n\016I" +
      "NTERVAL_ARRAY\020\210\001B/\n\026org.apache.tajo.comm" +
      "onB\rTajoDataTypesH\001\210\001\000\240\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_DataType_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_DataType_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_DataType_descriptor,
              new java.lang.String[] { "Type", "Length", "Code", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
